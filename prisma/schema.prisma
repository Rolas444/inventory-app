generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  status        Boolean       @default(true)
  roleId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  transactions  Transaction[]
  role          Role          @relation(fields: [roleId], references: [id])
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Product {
  id               String            @id @default(uuid())
  sku              String            @unique
  name             String
  price            Decimal
  wholesale        Decimal
  cost             Decimal
  status           Boolean           @default(true)
  stock            Int
  image            String
  description      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  platformProducts PlatformProduct[]
}

model TypeTransaction {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String
  platform         Boolean
  Status           Boolean           @default(true)
  visible          Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  platformProducts PlatformProduct[]
  transactions     Transaction[]
}

model PlatformProduct {
  id                String          @id @default(uuid())
  productId         String
  typeTransactionId String
  quantity          Int
  price             Decimal
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id])
  typeTransaction   TypeTransaction @relation(fields: [typeTransactionId], references: [id])
}

model Transaction {
  id                String          @id @default(uuid())
  userId            String
  typeTransactionId String
  quantity          Int
  price             Decimal
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  typeTransaction   TypeTransaction @relation(fields: [typeTransactionId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}
